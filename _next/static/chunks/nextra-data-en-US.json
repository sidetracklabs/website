{"/examples":{"title":"Examples","data":{"":"TODO"}},"/guides":{"title":"Guides","data":{"":"This is the index page for the Guides folder!"}},"/guides/configuring-queues":{"title":"Configuring Queues","data":{"":"mention maxAttempts and backoff strategy? (we only have 1 rn.)"}},"/guides/db-transactional-jobs":{"title":"DB Transactional Jobs","data":{"":"mention maxAttempts, queryAdapter, and backoff strategy? (we only have 1 rn.)"}},"/":{"title":"Welcome to Sidetrack","data":{"":"Sidetrack is a background job processing library in Typescript, backed by your database."}},"/quickstart":{"title":"Quickstart","data":{"":"In this tutorial, you'll learn how to add Sidetrack to your project and run your first job.\nInstall using npm\n\n\nImport it into your project, and initialize Sidetrack by defining your queues\n\nNotice how you pass in the types for your queues, specifying your queueName as the key (userOnboarding), and the value being the type for your job's payload ({email: string}).To insert a job, use the insertJob function to specify the queue and the job payload.Once the job is inserted, Sidetrack will pick it up and run it. You should see a log in your terminal!You are ready to continue your sidetrack journey! Good luck and don't get sidetracked!","more-on-types#More on types":"Notice how the types you defined above prevent you from inserting an invalid job."}},"/why-sidetrack":{"title":"Motivation","data":{"":"After working on a handful of applications, we noticed that we couldn't find a library in TypeScript/JavaScript ecosystem for working with background jobs that was database-backed and TypeScript-first. The most popular job processing libraries in the Node.js ecosystem use Redis, which is a great tool, but we wanted to use a database that we were already using in our applications. We also wanted to be able to use TypeScript to define our jobs and have a great developer experience. Additionally, databases allow for transactional guarantees, so we can avoid inserting jobs into the queue if the transaction fails.Our focus is on relational databases, namely PostgreSQL, but we are open to supporting other databases in the future. This would make us the first database-backed job processing library in the Node.js ecosystem that we know of to support more than PostgreSQL."}}}